/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package sabah;

import java.util.ArrayList;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
/**
 *
 * @author yazan
 */

public class LeaveManagementManager {
    
   //Array List for Employees (General Users) and Admin Users - Inheritance Used
   private ArrayList<AdminUsers> user = new ArrayList<AdminUsers>();
   
   //Array List for Leave Requests. This Array List will store all leave requests made by employees
   private ArrayList<LeaveRequest> leaveRequestArr = new ArrayList<LeaveRequest>();
   
  public LeaveManagementManager() throws SQLException
    {
      //Table of data representing a database result set. Generated by executing a query ("SELECT * FROM AdminUsers")
      ResultSet rsAminUsers = LoginUI.db.query("SELECT * FROM AdminUsers");
      
        //While Loop that runs through the table of data tblUsers
        while (rsAminUsers.next())
         {
           String usersID = rsAminUsers.getString("UsersID");
           String name = rsAminUsers.getString("Name");
           String surname = rsAminUsers.getString("Surname");
           String usernameEmail = rsAminUsers.getString("usernameEmail");
           String contactDetails = rsAminUsers.getString("contactDetails");
           String password = rsAminUsers.getString("password");
       
           //Admin User Object added to the User ArrayList
           user.add(new AdminUsers(name, surname, usernameEmail, contactDetails, password));
         }
      
      //Table of data representing a database result set. Generated by executing a query ("SELECT * FROM Employees")
      ResultSet rsGeneralUsers = LoginUI.db.query("SELECT * FROM Employees");
      
      //While Loop that runs through the table of data - tblEmployees
      while (rsGeneralUsers.next())
         {
            String emploeeID = rsGeneralUsers.getString("EmployeeID");
            String name = rsGeneralUsers.getString("Name");
            String surname = rsGeneralUsers.getString("Surname");
            String gender = rsGeneralUsers.getString("Gender");
            String jobTitle = rsGeneralUsers.getString("JobTitle");
            String typeOfEmployment = rsGeneralUsers.getString("TypeOfEmployment");
            LocalDate employmentDate = LocalDate.parse(rsGeneralUsers.getString("EmploymentDate"), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.n"));
            String Status = rsGeneralUsers.getString("Status");
            String username = rsGeneralUsers.getString("Username");
            String password = rsGeneralUsers.getString("Password");
            String contactDetails = rsGeneralUsers.getString("Password");
       
           //General User (Employee) object added to user Array List
           user.add(new EmployeesGeneralUsers(name, surname, username, contactDetails, password, gender, jobTitle, typeOfEmployment,employmentDate, Status));
        }
      
      //Table of data representing a database result set. Generated by executing a query ("SELECT * FROM LeaveRequests")
      ResultSet rsLeaveRequest = LoginUI.db.query("SELECT * FROM LeaveRequests");
      
      //while loop that tun through the table of data - tblLeaveRequest
      while (rsLeaveRequest.next())
        {
          String leaveRequestID = rsLeaveRequest.getString("LeaveRequestID");
          String employeeID = rsLeaveRequest.getString("EmployeeID");
          String LeaveManagementID = rsLeaveRequest.getString("LeaveManagementID");
          LocalDate dateFrom = LocalDate.parse(rsLeaveRequest.getString("DateFrom"), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.n"));
          LocalDate dateTo = LocalDate.parse(rsLeaveRequest.getString("DateTo"), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.n"));
          String departmentID = rsLeaveRequest.getString("DepartmentID");
       
          //Leave Request Object added to database = tblLeaveRequest
          leaveRequestArr.add(new LeaveRequest(employeeID, LeaveManagementID, departmentID, dateFrom, dateTo));
        }
    }
  
  
  //Boolean method that will check if the username and password of an Admin User is correct
  //This method will be called in the LoginUI to check the password and username entered by a user
  public boolean checkUsernamePasswordAdminUsers(String username, String password)
  {
      //boolean variable
      boolean check = false;
      
     for (int x = 0; x < user.size(); x++)
     {
         //if a user object is not a insatnce of an EmployeeGeneralUser then the Email and Password of the Admin User is checked
         if (!(user.get(x) instanceof EmployeesGeneralUsers))
         {
           if (user.get(x).getUernameEmail().equalsIgnoreCase(username) && user.get(x).getPassword().equalsIgnoreCase(password))
            {
              //if password and username is correct then check is true
              check = true;
            }
         }
     }
     //return true or false
     return check;
  }
  
  
  //Boolean method that will check if the username and password of a General User {Employee} is correct
  //This method will be called in the LoginUI to check the password and username entered by a user
   public boolean checkUsernamePasswordEmployees(String username, String password)
  {
      //boolean variable
      boolean check = false;
      
     for (int x = 0; x < user.size(); x++)
     {
         //if a user object is an insatnce of an EmployeeGeneralUser then the Email and Password of the General User{Employee} is checked
         if (user.get(x) instanceof EmployeesGeneralUsers)
         {
            if (user.get(x).getUernameEmail().equalsIgnoreCase(username) && user.get(x).getPassword().equalsIgnoreCase(password))
             {
               //if Password and Username is correct then ckeck = true
               check = true;
             }
         }
     }
     //returns true or false
     return check;
  }
  
  
   //void method to add an Admin User into the user ArrayList
   //This method is called in the AdminUserUI to add an Admin User to the database
   public void addUser(String firstname, String surname, String usernameEmail, String contactDetails, String password)
    {
        //Add a new object to user ArrayList
       user.add(new AdminUsers(firstname, surname, usernameEmail, contactDetails, password));
    }
   
   
   
   //void method to add a General User (Employee) to the user ArrayList
   //This method is called in the EmployeesUI to add a General User (Employee) to the database
   public void addEmployee(String name, String surname, String gender, String jobTitle, String typeOfEmployment, LocalDate EmploymentDate, String status,
           String username, String password, String contactDetails)
   {
    //Add a new object to user ArrayList
    user.add(new EmployeesGeneralUsers (name, surname, username, contactDetails, password, gender, jobTitle, typeOfEmployment, EmploymentDate, status));
   }
   
   
  
    //Method that will return a string 
    //Method will return all AdminUsers taken from the user ArrayList
    //This Method will be called in the UsersUI to display all AdminUsers in a Text Area
      public String displayAllAdminUsers()
    {
     String temp = "";
     
     //Loop through the user ArrayList
     for (int x = 0; x < user.size(); x++)
     {
         //if the user object is not an instance of an EmployeesGeneralUsers
         if (!(user.get(x) instanceof EmployeesGeneralUsers))
         {
           //Build a string that only consists of Admin User objects
           temp = temp + user.get(x).toString() + "\n";
         }
      
     }
     //return the String
     return temp;        
        
    }
      
      
      
    //Return Method that will return a string 
    //return Method will return all General Users (Employees) taken from the user ArrayList
    //This Method will be called in the EmployeesUI to display all employees in a Text Area
     public String displayAllEmployees()
     {
      String temp = "";
       
       //Loop through the user ArrayList
       for (int x = 0; x < user.size(); x++)
         {
            //if the user object is an instance of an EmployeesGeneralUsers
            if (user.get(x) instanceof EmployeesGeneralUsers)
               {
                 //Build a string that only consists of GeneralUsers(Employees) User objects
                 temp = temp + user.get(x).toString() + "\n";
               }
      
         }
       
      //return the String
      return temp; 
     }
     
 
           
   
    
    
    
        
    
}
